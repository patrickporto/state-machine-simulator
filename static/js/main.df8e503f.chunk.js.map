{"version":3,"sources":["../i18n sync /^/.//.*/.js$","../i18n/en-US.js","reducers.js","sagas.js","store.js","theme.js","Home.js","App.js","serviceWorker.js","i18n.js","settings.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","language","translations","reducer","action","state","saga","fetchUser","console","log","take","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","theme","global","colors","brand","font","family","size","height","Home","Heading","level","margin","Trans","i18nKey","App","children","useState","showSidebar","setShowSidebar","ResponsiveContext","Consumer","Box","fill","tag","direction","align","justify","background","pad","vertical","horizontal","elevation","Button","icon","Notification","onClick","flex","overflow","exact","path","Layer","FormClose","Collapsible","open","width","Boolean","window","location","hostname","match","i18n","use","LanguageDetector","initReactI18next","init","fallbackLng","debug","ns","defaultNS","interpolation","escapeValue","resources","reduce","current","lang","require","default","react","wait","ReactDOM","render","StrictMode","I18nextProvider","Grommet","full","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yIAAA,IAAIA,EAAM,CACT,aAAc,KAIf,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,iCCtBpB,OAMeY,UANE,CACbC,aAAc,CACV,cAAe,iB,uHCERC,EAJC,SAACC,EAAQC,GACrB,OAAOA,G,oCCKDC,GAJV,SAASC,EAAUH,GACfI,QAAQC,IAAI,aAGhB,SAAUH,IAAV,iEACI,OADJ,SACUI,YAAK,uBAAwBH,GADvC,uCAIeD,QCJTK,EAAiBC,cAEjBC,EAAQC,YAAYX,EAASY,YAAgBJ,IAEnDA,EAAeK,IAAIV,GAEJO,QCCAI,EAbD,CACVC,OAAQ,CACJC,OAAQ,CACJC,MAAO,WAEXC,KAAM,CACFC,OAAQ,SACRC,KAAM,OACNC,OAAQ,U,yGCILC,EARF,WACT,OACI,kBAACC,EAAA,EAAD,CAASC,MAAM,IAAIC,OAAO,QACtB,kBAACC,EAAA,EAAD,CAAOC,QAAQ,eAAf,cC6FGC,G,OAtFH,SAAC,GAAiB,EAAfC,SAAgB,IAAD,EACYC,oBAAS,GADrB,mBACnBC,EADmB,KACNC,EADM,KAE1B,OACI,kBAAC,IAAD,KACI,kBAACC,EAAA,EAAkBC,SAAnB,MACK,SAACd,GAAD,OACG,kBAACe,EAAA,EAAD,CAAKC,MAAI,GACL,kBAACD,EAAA,EAAD,CACIE,IAAI,SACJC,UAAU,MACVC,MAAM,SACNC,QAAQ,UACRC,WAAW,UACXC,IAAK,CAAEC,SAAU,QAASC,WAAY,UACtCC,UAAU,UAEV,kBAACtB,EAAA,EAAD,CAASC,MAAM,IAAIC,OAAO,QAA1B,UAGA,kBAACqB,EAAA,EAAD,CACIC,KAAM,kBAACC,EAAA,EAAD,MACNC,QAAS,kBAAMjB,GAAgBD,OAGvC,kBAACI,EAAA,EAAD,CACIG,UAAU,MACVY,MAAI,EACJC,SAAU,CAAEP,WAAY,WAExB,kBAACT,EAAA,EAAD,CAAKe,MAAI,EAACX,MAAM,SAASC,QAAQ,UAC7B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,KACd,kBAAC,EAAD,SAIVtB,GAAwB,UAATX,EAiBb,kBAACkC,EAAA,EAAD,KACI,kBAACnB,EAAA,EAAD,CACIM,WAAW,UACXJ,IAAI,SACJG,QAAQ,MACRD,MAAM,SACND,UAAU,OAEV,kBAACQ,EAAA,EAAD,CACIC,KAAM,kBAACQ,EAAA,EAAD,MACNN,QAAS,kBACLjB,GAAe,OAI3B,kBAACG,EAAA,EAAD,CACIC,MAAI,EACJK,WAAW,UACXF,MAAM,SACNC,QAAQ,UAJZ,YA/BJ,kBAACgB,EAAA,EAAD,CACIlB,UAAU,aACVmB,KAAM1B,GAEN,kBAACI,EAAA,EAAD,CACIe,MAAI,EACJQ,MAAM,SACNjB,WAAW,UACXI,UAAU,QACVN,MAAM,SACNC,QAAQ,UANZ,oBC3ChBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4CCbNC,IAGKC,IAAIC,KAEJD,IAAIE,KAGJC,KAAK,CACFC,YAAa,QACbC,OAAO,EACPC,GAAI,CAAC,gBACLC,UAAW,eACXC,cAAe,CACXC,aAAa,GAEjBC,UCpBiB,CAAC,SDoBGC,QAAO,SAACC,EAASC,GAClC,OAAO,2BACAD,GADP,kBAEKC,EAAOC,OAAQ,YAAWD,EAAZ,QAAuBE,YAE3C,IACHC,MAAO,CACHC,MAAM,KAIHlB,QAAf,EErBAmB,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAU3E,MAAOA,GACb,kBAAC4E,EAAA,EAAD,CAAiBtB,KAAMA,GACnB,kBAACuB,EAAA,EAAD,CAASzE,MAAOA,EAAO0E,MAAI,GACvB,kBAAC,EAAD,UAKhBC,SAASC,eAAe,SH8GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7F,QAAQ6F,MAAMA,EAAMC,a","file":"static/js/main.df8e503f.chunk.js","sourcesContent":["var map = {\n\t\"./en-US.js\": 108\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 107;","const language = {\n    translations: {\n        \"hello-world\": \"Hello World\",\n    },\n};\n\nexport default language;\n","const reducer = (action, state) => {\n    return state;\n};\n\nexport default reducer;\n","import { take } from \"redux-saga/effects\";\n\nfunction fetchUser(action) {\n    console.log(\"CONNECTED\");\n}\n\nfunction* saga() {\n    yield take(\"USER_FETCH_REQUESTED\", fetchUser);\n}\n\nexport default saga;\n","import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducer from \"./reducers\";\nimport saga from \"./sagas\";\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(saga);\n\nexport default store;\n","const theme = {\n    global: {\n        colors: {\n            brand: \"#228BE6\",\n        },\n        font: {\n            family: \"Roboto\",\n            size: \"18px\",\n            height: \"20px\",\n        },\n    },\n};\n\nexport default theme;\n","import React from \"react\";\nimport { Heading } from \"grommet\";\nimport { Trans } from \"react-i18next\";\n\nconst Home = () => {\n    return (\n        <Heading level=\"3\" margin=\"none\">\n            <Trans i18nKey=\"hello-world\">app body</Trans>\n        </Heading>\n    );\n};\n\nexport default Home;\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport {\n    Box,\n    Button,\n    Collapsible,\n    Heading,\n    Layer,\n    ResponsiveContext,\n} from \"grommet\";\nimport { FormClose, Notification } from \"grommet-icons\";\nimport Home from \"./Home\";\nimport \"./App.css\";\n\nconst App = ({ children }) => {\n    const [showSidebar, setShowSidebar] = useState(false);\n    return (\n        <Router>\n            <ResponsiveContext.Consumer>\n                {(size) => (\n                    <Box fill>\n                        <Box\n                            tag=\"header\"\n                            direction=\"row\"\n                            align=\"center\"\n                            justify=\"between\"\n                            background=\"light-2\"\n                            pad={{ vertical: \"small\", horizontal: \"medium\" }}\n                            elevation=\"medium\"\n                        >\n                            <Heading level=\"3\" margin=\"none\">\n                                My App\n                            </Heading>\n                            <Button\n                                icon={<Notification />}\n                                onClick={() => setShowSidebar(!showSidebar)}\n                            />\n                        </Box>\n                        <Box\n                            direction=\"row\"\n                            flex\n                            overflow={{ horizontal: \"hidden\" }}\n                        >\n                            <Box flex align=\"center\" justify=\"center\">\n                                <Switch>\n                                    <Route exact path=\"/\">\n                                        <Home />\n                                    </Route>\n                                </Switch>\n                            </Box>\n                            {!showSidebar || size !== \"small\" ? (\n                                <Collapsible\n                                    direction=\"horizontal\"\n                                    open={showSidebar}\n                                >\n                                    <Box\n                                        flex\n                                        width=\"medium\"\n                                        background=\"light-2\"\n                                        elevation=\"small\"\n                                        align=\"center\"\n                                        justify=\"center\"\n                                    >\n                                        sidebar\n                                    </Box>\n                                </Collapsible>\n                            ) : (\n                                <Layer>\n                                    <Box\n                                        background=\"light-2\"\n                                        tag=\"header\"\n                                        justify=\"end\"\n                                        align=\"center\"\n                                        direction=\"row\"\n                                    >\n                                        <Button\n                                            icon={<FormClose />}\n                                            onClick={() =>\n                                                setShowSidebar(false)\n                                            }\n                                        />\n                                    </Box>\n                                    <Box\n                                        fill\n                                        background=\"light-2\"\n                                        align=\"center\"\n                                        justify=\"center\"\n                                    >\n                                        sidebar\n                                    </Box>\n                                </Layer>\n                            )}\n                        </Box>\n                    </Box>\n                )}\n            </ResponsiveContext.Consumer>\n        </Router>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from \"i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from \"react-i18next\";\nimport { LANGUAGES } from \"./settings\";\n\ni18n\n    // detect user language\n    // learn more: https://github.com/i18next/i18next-browser-languageDetector\n    .use(LanguageDetector)\n    // pass the i18n instance to react-i18next.\n    .use(initReactI18next)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n        fallbackLng: \"en-US\",\n        debug: true,\n        ns: [\"translations\"],\n        defaultNS: \"translations\",\n        interpolation: {\n            escapeValue: false, // not needed for react as it escapes by default\n        },\n        resources: LANGUAGES.reduce((current, lang) => {\n            return {\n                ...current,\n                [lang]: require(`../i18n/${lang}.js`).default,\n            };\n        }, {}),\n        react: {\n            wait: true,\n        },\n    });\n\nexport default i18n;\n","//#region i18n\nexport const LANGUAGES = [\"en-US\"];\n//#endregion\n\n//#region remote storage\nexport const REMOTE_STORAGE = {\n    DROPBOX_KEY: undefined,\n    GOOGLEDRIVE_KEY: undefined,\n};\n//#endregion\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { Grommet } from \"grommet\";\nimport { I18nextProvider } from \"react-i18next\";\nimport store from \"./store\";\nimport theme from \"./theme\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport i18n from \"./i18n\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <I18nextProvider i18n={i18n}>\n                <Grommet theme={theme} full>\n                    <App />\n                </Grommet>\n            </I18nextProvider>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}